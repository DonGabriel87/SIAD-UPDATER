package Interfaces.Templates.Process;

import java.awt.Font;
import java.util.concurrent.atomic.AtomicInteger;
import javax.swing.BorderFactory;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JTree;
import javax.swing.SwingWorker;
import javax.swing.Timer;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;

public class DirectoryOverview extends javax.swing.JPanel {

    /**
     * Creates new form DirectoryConfiguration
     */
    public DirectoryOverview() {
        initComponents();
        addPopUpJTree();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelCarpetaOrigen = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtArbolCarpetaOrigen = new javax.swing.JTree();
        panelCarpetaDestino = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtArbolCarpetaDestino = new javax.swing.JTree();

        setLayout(new java.awt.GridLayout(2, 1));

        panelCarpetaOrigen.setBackground(new java.awt.Color(244, 244, 244));
        panelCarpetaOrigen.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Carpeta de origen", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 16))); // NOI18N
        panelCarpetaOrigen.setToolTipText("Haz clic derecho para ver opciones las árbol");
        panelCarpetaOrigen.setLayout(new javax.swing.BoxLayout(panelCarpetaOrigen, javax.swing.BoxLayout.LINE_AXIS));

        jtArbolCarpetaOrigen.setModel(null);
        jtArbolCarpetaOrigen.setToolTipText("Haz clic derecho para ver opciones las árbol");
        jtArbolCarpetaOrigen.setDoubleBuffered(true);
        jScrollPane2.setViewportView(jtArbolCarpetaOrigen);

        panelCarpetaOrigen.add(jScrollPane2);

        add(panelCarpetaOrigen);

        panelCarpetaDestino.setBackground(new java.awt.Color(244, 244, 244));
        panelCarpetaDestino.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Carpeta de destino", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 16))); // NOI18N
        panelCarpetaDestino.setToolTipText("Haz clic derecho para ver opciones las árbol");
        panelCarpetaDestino.setLayout(new javax.swing.BoxLayout(panelCarpetaDestino, javax.swing.BoxLayout.LINE_AXIS));

        jtArbolCarpetaDestino.setModel(null);
        jtArbolCarpetaDestino.setToolTipText("Haz clic derecho para ver opciones las árbol");
        jtArbolCarpetaDestino.setDoubleBuffered(true);
        jScrollPane1.setViewportView(jtArbolCarpetaDestino);

        panelCarpetaDestino.add(jScrollPane1);

        add(panelCarpetaDestino);
        panelCarpetaDestino.getAccessibleContext().setAccessibleName("Carpeta de destino en donde se colocaran los archivos de actualización");
    }// </editor-fold>//GEN-END:initComponents

    private void addPopUpJTree() {
        JPopupMenu jPopupMenuArbolCarpetaOrigen = createPopupMenu("origen");
        JPopupMenu jPopupMenuArbolCarpetaDestino = createPopupMenu("destino");

        jPopupMenuArbolCarpetaOrigen.setLightWeightPopupEnabled(false);
        jPopupMenuArbolCarpetaDestino.setLightWeightPopupEnabled(false);

        jtArbolCarpetaOrigen.setComponentPopupMenu(jPopupMenuArbolCarpetaOrigen);
        jtArbolCarpetaDestino.setComponentPopupMenu(jPopupMenuArbolCarpetaDestino);
    }

    private JPopupMenu createPopupMenu(String tipo) {
        JPopupMenu popupMenu = new JPopupMenu();
        JMenuItem jmiMostrarTodos = new JMenuItem("Dibujar todos los árboles");
        jmiMostrarTodos.setToolTipText("Dibujar el árbol de directorio de ambas carpetas");
        jmiMostrarTodos.addActionListener(e -> cargarTodoLosArboles());
        popupMenu.add(jmiMostrarTodos);

        JMenuItem jmiMostrarCarpeta = new JMenuItem("Dibujar árbol carpeta " + tipo);
        jmiMostrarCarpeta.setToolTipText("Dibujar el árbol del directorio de la carpeta de " + tipo);
        jmiMostrarCarpeta.addActionListener(e -> cargarArbolIndividual(tipo));
        popupMenu.add(jmiMostrarCarpeta);

        return popupMenu;
    }

    private void cargarArbolIndividual(String tipo) {
        clearJTrees();
        JPanel panelArbol = tipo.equals("origen") ? panelCarpetaOrigen : panelCarpetaDestino;
        JTree arbol = tipo.equals("origen") ? jtArbolCarpetaOrigen : jtArbolCarpetaDestino;
        String path = tipo.equals("origen") ? Classes.Core.App.Cache.getOripath() : Classes.Core.App.Cache.getDespath();

        // Crear un temporizador para actualizar el texto del borde
        Timer timer = new Timer(500, null); 
        AtomicInteger counter = new AtomicInteger(0);

        timer.addActionListener(e -> {
            panelArbol.setBorder(createLoadingBorder(tipo, counter.getAndIncrement() % 3));
        });

        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                timer.start();
                Classes.Core.IO.Files.fillJTree(arbol, path);
                return null;
            }

            @Override
            protected void done() {
                timer.stop();
                panelArbol.setBorder(createFinishedBorder(tipo));
            }
        };
        worker.execute();
    }

    private void cargarTodoLosArboles() {
        clearJTrees();
        cargarArbolIndividual("origen");
        cargarArbolIndividual("destino");
    }

    private Border createLoadingBorder(String tipo, int step) {
        String loadingText;
        switch (step) {
            case 0:
                loadingText = "Cargando.";
                break;
            case 1:
                loadingText = "Cargando  .";
                break;
            default:
                loadingText = "Cargando    .";
                break;
        }
        return BorderFactory.createTitledBorder(
                null, "Carpeta de " + tipo + " - " + loadingText,
                TitledBorder.DEFAULT_JUSTIFICATION,
                TitledBorder.DEFAULT_POSITION,
                new Font("Segoe UI", Font.PLAIN, 16)
        );
    }

    private Border createFinishedBorder(String tipo) {
        return BorderFactory.createTitledBorder(null, "Carpeta de " + tipo + " - Completado", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, new Font("Segoe UI", Font.PLAIN, 16));
    }

    private void clearJTrees() {
        jtArbolCarpetaOrigen.setModel(null);
        jtArbolCarpetaDestino.setModel(null);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTree jtArbolCarpetaDestino;
    private javax.swing.JTree jtArbolCarpetaOrigen;
    private javax.swing.JPanel panelCarpetaDestino;
    private javax.swing.JPanel panelCarpetaOrigen;
    // End of variables declaration//GEN-END:variables
}
